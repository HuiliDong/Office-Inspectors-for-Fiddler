//-----------------------------------------------------------------------
// Copyright (c) 2013 Microsoft Corporation. All rights reserved.
// Use of this sample source code is subject to the terms of the Microsoft license 
// agreement under which you licensed this sample source code and is provided AS-IS.
// If you did not accept the terms of the license agreement, you are not authorized 
// to use this sample source code. For the terms of the license, please see the 
// license agreement between you and Microsoft.
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace FSSHTTPandWOPIInspector.Parsers
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// 2.2.2.1	Intermediate Node Object Data
    /// </summary>
    public class IntermediateNodeObjectData : BaseStructure
    {
        public bit16StreamObjectHeaderStart IntermediateNodeStart;
        public bit16StreamObjectHeaderStart SignatureHeader;
        public BinaryItem SignatureData;
        public bit16StreamObjectHeaderStart DataSizeHeader;
        public ulong DataSize;
        public bit8StreamObjectHeaderEnd IntermediateNodeEnd;

        /// <summary>
        /// Parse the IntermediateNodeObjectData structure.
        /// </summary>
        /// <param name="s">An stream containing IntermediateNodeObjectData structure.</param>
        public override void Parse(Stream s)
        {
            base.Parse(s);
            this.IntermediateNodeStart = new bit16StreamObjectHeaderStart();
            this.IntermediateNodeStart.Parse(s);
            this.SignatureHeader = new bit16StreamObjectHeaderStart();
            this.SignatureHeader.Parse(s);
            this.SignatureData = new BinaryItem();
            this.SignatureData.Parse(s);
            this.DataSizeHeader = new bit16StreamObjectHeaderStart();
            this.DataSizeHeader.Parse(s);
            this.DataSize = ReadUlong();
            this.IntermediateNodeEnd = new bit8StreamObjectHeaderEnd();
            this.IntermediateNodeEnd.Parse(s);
        }
    }

    /// <summary>
    /// 2.2.3.1	Leaf Node Object Data
    /// </summary>
    public class LeafNodeObjectData : BaseStructure
    {
        public bit16StreamObjectHeaderStart LeafNodeStart;
        public bit16StreamObjectHeaderStart SignatureHeader;
        public BinaryItem SignatureData;
        public bit16StreamObjectHeaderStart DataSizeHeader;
        public ulong DataSize;
        public UnKnowStructure OtherData;
        public bit8StreamObjectHeaderEnd LeafNodeEnd;

        /// <summary>
        /// Parse the LeafNodeObjectData structure.
        /// </summary>
        /// <param name="s">An stream containing LeafNodeObjectData structure.</param>
        public override void Parse(Stream s)
        {
            base.Parse(s);
            this.LeafNodeStart = new bit16StreamObjectHeaderStart();
            this.LeafNodeStart.Parse(s);
            this.SignatureHeader = new bit16StreamObjectHeaderStart();
            this.SignatureHeader.Parse(s);
            this.SignatureData = new BinaryItem();
            this.SignatureData.Parse(s);
            this.DataSizeHeader = new bit16StreamObjectHeaderStart();
            this.DataSizeHeader.Parse(s);
            this.DataSize = ReadUlong();
            if(ContainsStreamObjectStart16BitHeader(0x2F))
            {
                this.OtherData = new UnKnowStructure();
                this.OtherData.Parse(s);
            }
            
            this.LeafNodeEnd = new bit8StreamObjectHeaderEnd();
            this.LeafNodeEnd.Parse(s);
        }
    }

    /// <summary>
    /// UnKnowStructure
    /// </summary>
    public class UnKnowStructure : BaseStructure
    {
        public bit16StreamObjectHeaderStart StructureHeader;
        public byte[] StructureData;

        /// <summary>
        /// Parse the LeafNodeObjectData structure.
        /// </summary>
        /// <param name="s">An stream containing LeafNodeObjectData structure.</param>
        public override void Parse(Stream s)
        {
            base.Parse(s);
            this.StructureHeader = new bit16StreamObjectHeaderStart();
            this.StructureHeader.Parse(s);
            this.StructureData = ReadBytes(this.StructureHeader.Length);
        }
    }
}